'''
#random dictionary for testing purposes
import numpy as np

# Seed for reproducibility
np.random.seed(42)

# Define the weights dictionary FIRST
weights = {
    "layer1": np.random.rand(12, 6),
    "layer2": np.random.rand(6, 6),
    "layer3": np.random.rand(6, 6),
    "layer4": np.random.rand(6, 6),
    "layer5": np.random.rand(6, 2),
}
'''

# This functions creates the cpp headerfile with the matricies for use in the c++ file
# creates layer1_weights[12][6], layer2_weights[6][6],..., layer5_weights[6][2]
# make sure to have #include "weights.hpp" in main file
def export_weights_to_header(weights, filename="weights.hpp"):
    with open(filename, "w") as f:
        f.write("#include <cstdint>\n\n")
        f.write("// Autogenerated weight matrices\n\n")
        for name, matrix in weights.items():
            shape = matrix.shape
            f.write(f"const float {name}_weights[{shape[0]}][{shape[1]}] = {{\n")
            for row in matrix:
                quantized = [int(val*255) for val in row]
                row_str = ", ".join(str(val) for val in quantized)
                f.write(f"    {{ {row_str} }},\n")
            f.write("};\n\n")


export_weights_to_header(weights)
